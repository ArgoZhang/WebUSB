@page "/"
@inject HttpClient Http
@inject ILogger<Index> logger
@inject IUSB usb

<h1>WebUSB Test, Open up your browser devtools to see the logs!</h1>
<input type="button" class="btn" value="List devices!" onclick=@ListDevices />
<br>
<br>
<input type="text" placeholder="Vendor Id" bind=@vendorId />
<input type="text" placeholder="Product Id" bind=@productId />
<input type="button" class="btn" value="Request devices!" onclick=@RequestDevices />

@functions {
    private string productId;
    private string vendorId;
    private IDisposable onConnectHandler;

    protected override async Task OnInitAsync()
    {
        onConnectHandler = await this.usb.OnConnect(device => 
        {
            logger.LogInformation("Connected: ");
            logger.LogInformation(device);
            return Task.CompletedTask;
        });
    }

    private async Task RequestDevices()
    {
        USBDevice device = null;

        if(string.IsNullOrEmpty(this.productId) && string.IsNullOrEmpty(this.vendorId))
        {
            device = await this.usb.RequestDevice();
        }
        else
        {
            device = await this.usb.RequestDevice(new USBDeviceRequestOptions
            {
                Filters = new List<USBDeviceFilter>
                {
                    new USBDeviceFilter {VendorId = 0x079b, ProductId = 0x0028}
                    //new USBDeviceFilter { VendorId = Convert.ToUInt16(this.vendorId, 16) , ProductId = Convert.ToUInt16(this.productId, 16) }
                }
            });
        }
        if(device != null)
        {
            logger.LogInformation(device);
        }
    }

    protected async Task ListDevices()
    {
        var devices = await this.usb.GetDevices();
        logger.LogInformation(devices);
    }
}